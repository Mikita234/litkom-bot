import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from db import db
from utils import format_stock_report, format_low_stock

logger = logging.getLogger(__name__)
router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class AdminStates(StatesGroup):
    waiting_for_admin_confirmation = State()
    waiting_for_leader_id = State()
    waiting_for_item_name = State()
    waiting_for_item_category = State()
    waiting_for_item_price = State()
    waiting_for_item_cost = State()
    waiting_for_item_min_stock = State()
    waiting_for_stock_name = State()
    waiting_for_stock_count = State()
    waiting_for_arrival_quantity = State()

@router.message(Command("set_admin"))
async def cmd_set_admin(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /set_admin"""
    user_id = message.from_user.id
    current_role = await db.get_user_role(user_id)
    
    if current_role == "admin":
        await message.answer("üëë –í—ã —É–∂–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        return
    
    if current_role is None:
        # –ü–µ—Ä–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –∞–¥–º–∏–Ω–æ–º
        success = await db.add_user(user_id, "admin", message.from_user.full_name)
        if success:
            await message.answer(
                "üëë –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –±–æ—Ç–∞.\n\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
                "‚Ä¢ –î–æ–±–∞–≤–ª—è—Ç—å –≤–µ–¥—É—â–∏—Ö –∫–æ–º–∞–Ω–¥–æ–π /add_leader\n"
                "‚Ä¢ –£–ø—Ä–∞–≤–ª—è—Ç—å –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–æ–π\n"
                "‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –æ—Ç—á—ë—Ç—ã\n"
                "‚Ä¢ –û–±–Ω—É–ª—è—Ç—å –ø—Ä–æ–¥–∞–∂–∏"
            )
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    else:
        await message.answer("‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —Ä–æ–ª—å –≤ —Å–∏—Å—Ç–µ–º–µ.")

@router.message(Command("add_leader"))
async def cmd_add_leader(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add_leader"""
    if not await db.is_admin(message.from_user.id):
        await message.answer("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –≤–µ–¥—É—â–∏—Ö.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –≤ –≥—Ä—É–ø–ø–µ
    if message.chat.type not in ['group', 'supergroup']:
        await message.answer("‚ùå –ö–æ–º–∞–Ω–¥–∞ /add_leader —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≥—Ä—É–ø–ø—ã
    try:
        chat_member = await message.bot.get_chat_member(message.chat.id, message.from_user.id)
        if chat_member.status not in ['creator', 'administrator']:
            await message.answer("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –≥—Ä—É–ø–ø—ã –º–æ–≥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –≤–µ–¥—É—â–∏—Ö.")
            return
    except Exception:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    await message.answer(
        "üë• –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–µ–¥—É—â–µ–≥–æ\n\n"
        "–ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –≤–µ–¥—É—â–∏–º, "
        "–∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ Telegram ID:"
    )
    await state.set_state(AdminStates.waiting_for_leader_id)

@router.message(AdminStates.waiting_for_leader_id)
async def process_leader_id(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ ID –≤–µ–¥—É—â–µ–≥–æ"""
    try:
        if message.forward_from:
            # –ï—Å–ª–∏ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            leader_id = message.forward_from.id
            leader_name = message.forward_from.full_name
        else:
            # –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω ID –≤—Ä—É—á–Ω—É—é
            leader_id = int(message.text)
            leader_name = None
        
        success = await db.add_user(leader_id, "leader", leader_name)
        if success:
            await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {leader_id} –Ω–∞–∑–Ω–∞—á–µ–Ω –≤–µ–¥—É—â–∏–º.")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤–µ–¥—É—â–µ–≥–æ.")
        
        await state.clear()
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Telegram ID (—á–∏—Å–ª–æ).")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–µ–¥—É—â–µ–≥–æ: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤–µ–¥—É—â–µ–≥–æ.")

@router.message(Command("add_item"))
async def cmd_add_item(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add_item"""
    if not await db.is_admin(message.from_user.id):
        await message.answer("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –ø–æ–∑–∏—Ü–∏–∏.")
        return
    
    await message.answer("üìö –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
    await state.set_state(AdminStates.waiting_for_item_name)

@router.message(AdminStates.waiting_for_item_name)
async def process_item_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏"""
    await state.update_data(item_name=message.text)
    await message.answer("üìÇ –í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:")
    await state.set_state(AdminStates.waiting_for_item_category)

@router.message(AdminStates.waiting_for_item_category)
async def process_item_category(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∑–∏—Ü–∏–∏"""
    await state.update_data(item_category=message.text)
    await message.answer("üí∞ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É (–≤ —Ä—É–±–ª—è—Ö):")
    await state.set_state(AdminStates.waiting_for_item_price)

@router.message(AdminStates.waiting_for_item_price)
async def process_item_price(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–Ω—ã –ø–æ–∑–∏—Ü–∏–∏"""
    try:
        price = float(message.text)
        if price < 0:
            await message.answer("‚ùå –¶–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π.")
            return
        
        await state.update_data(item_price=price)
        await message.answer("üí∞ –í–≤–µ–¥–∏—Ç–µ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å:")
        await state.set_state(AdminStates.waiting_for_item_cost)
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (—á–∏—Å–ª–æ).")

@router.message(AdminStates.waiting_for_item_cost)
async def process_item_cost(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ–∑–∏—Ü–∏–∏"""
    try:
        cost = float(message.text)
        if cost < 0:
            await message.answer("‚ùå –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π.")
            return
        
        await state.update_data(item_cost=cost)
        await message.answer("üìä –í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫:")
        await state.set_state(AdminStates.waiting_for_item_min_stock)
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å (—á–∏—Å–ª–æ).")

@router.message(AdminStates.waiting_for_item_min_stock)
async def process_item_min_stock(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –æ—Å—Ç–∞—Ç–∫–∞"""
    try:
        min_stock = int(message.text)
        if min_stock < 0:
            await message.answer("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º.")
            return
        
        data = await state.get_data()
        success = await db.add_item(
            data['item_name'],
            data['item_category'],
            data['item_price'],
            data['item_cost'],
            min_stock
        )
        
        if success:
            profit_margin = ((data['item_price'] - data['item_cost']) / data['item_price']) * 100
            await message.answer(
                f"‚úÖ –ü–æ–∑–∏—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞:\n"
                f"üìö {data['item_name']}\n"
                f"üìÇ {data['item_category']}\n"
                f"üí∞ –¶–µ–Ω–∞: {data['item_price']:.0f} —Ä—É–±.\n"
                f"üí∏ –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å: {data['item_cost']:.0f} —Ä—É–±.\n"
                f"üìä –ú–∏–Ω. –æ—Å—Ç–∞—Ç–æ–∫: {min_stock} —à—Ç.\n"
                f"üíé –ú–∞—Ä–∂–∞: {profit_margin:.1f}%"
            )
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–∏.")
        
        await state.clear()
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –æ—Å—Ç–∞—Ç–∫–∞.")

@router.message(Command("update_stock"))
async def cmd_update_stock(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /update_stock"""
    if not await db.is_admin(message.from_user.id):
        await message.answer("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å –æ—Å—Ç–∞—Ç–∫–∏.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π
    report_data = await db.get_stock_report()
    if not report_data:
        await message.answer("‚ùå –ù–µ—Ç –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
        return
    
    text = "üìö –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–∞:\n\n"
    for i, item in enumerate(report_data, 1):
        text += f"{i}. {item['name']} (—Ç–µ–∫—É—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫: {item['stock']})\n"
    
    await message.answer(text)
    await state.set_state(AdminStates.waiting_for_stock_name)

@router.message(AdminStates.waiting_for_stock_name)
async def process_stock_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–∞"""
    item_name = message.text
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–∑–∏—Ü–∏—è
    report_data = await db.get_stock_report()
    item_exists = any(item['name'] == item_name for item in report_data)
    
    if not item_exists:
        await message.answer("‚ùå –ü–æ–∑–∏—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")
        return
    
    await state.update_data(stock_name=item_name)
    await message.answer(f"üìä –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –æ—Å—Ç–∞—Ç–æ–∫ –¥–ª—è '{item_name}':")
    await state.set_state(AdminStates.waiting_for_stock_count)

@router.message(AdminStates.waiting_for_stock_count)
async def process_stock_count(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–∞"""
    try:
        count = int(message.text)
        if count < 0:
            await message.answer("‚ùå –û—Å—Ç–∞—Ç–æ–∫ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º.")
            return
        
        data = await state.get_data()
        item_name = data['stock_name']
        
        success = await db.update_stock(item_name, count)
        if success:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—Ç–∞–ª –ª–∏ –æ—Å—Ç–∞—Ç–æ–∫ –Ω–∏–∂–µ –º–∏–Ω–∏–º—É–º–∞
            report_data = await db.get_stock_report()
            for item in report_data:
                if item['name'] == item_name and item['stock'] <= item['min_stock']:
                    await message.answer(
                        f"‚úÖ –û—Å—Ç–∞—Ç–æ–∫ –ø–æ {item_name} –æ–±–Ω–æ–≤–ª—ë–Ω: {count} —à—Ç.\n\n"
                        f"‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –û—Å—Ç–∞—Ç–æ–∫ {item_name} –Ω–∏–∂–µ –º–∏–Ω–∏–º—É–º–∞ ({item['stock']}/{item['min_stock']})."
                    )
                    return
            await message.answer(f"‚úÖ –û—Å—Ç–∞—Ç–æ–∫ –ø–æ {item_name} –æ–±–Ω–æ–≤–ª—ë–Ω: {count} —à—Ç.")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Å—Ç–∞—Ç–∫–∞.")
        
        await state.clear()
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")

@router.message(Command("report"))
async def cmd_report(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /report"""
    if not await db.is_admin(message.from_user.id):
        await message.answer("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –æ—Ç—á—ë—Ç—ã.")
        return
    
    report_data = await db.get_stock_report()
    text = format_stock_report(report_data)
    await message.answer(text)

@router.message(Command("low"))
async def cmd_low(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /low"""
    if not await db.is_admin(message.from_user.id):
        await message.answer("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –Ω–∏–∑–∫–∏–µ –æ—Å—Ç–∞—Ç–∫–∏.")
        return
    
    low_stock_data = await db.get_low_stock()
    text = format_low_stock(low_stock_data)
    await message.answer(text)

@router.message(Command("reset_sales"))
async def cmd_reset_sales(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /reset_sales"""
    if not await db.is_admin(message.from_user.id):
        await message.answer("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –æ–±–Ω—É–ª—è—Ç—å –ø—Ä–æ–¥–∞–∂–∏.")
        return
    
    success = await db.reset_sales()
    if success:
        await message.answer("‚úÖ –ü—Ä–æ–¥–∞–∂–∏ –æ–±–Ω—É–ª–µ–Ω—ã. –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π –º–µ—Å—è—Ü!")
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω—É–ª–µ–Ω–∏–∏ –ø—Ä–æ–¥–∞–∂.")

@router.message(Command("arrival"))
async def cmd_arrival(message: Message):
    """–ü—Ä–∏—Ö–æ–¥ —Ç–æ–≤–∞—Ä–∞ (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫ –æ—Å—Ç–∞—Ç–∫—É)"""
    if not await db.is_admin(message.from_user.id):
        await message.answer("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏—Ö–æ–¥.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞
    items = await db.get_all_items()
    if not items:
        await message.answer("‚ùå –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return
    
    keyboard = create_items_keyboard(items, "arrival")
    await message.answer(
        "üì¶ <b>–ü—Ä–∏—Ö–æ–¥ —Ç–æ–≤–∞—Ä–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫ –æ—Å—Ç–∞—Ç–∫—É:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )

@router.message(Command("inventory"))
async def cmd_inventory(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /inventory - –ø–æ–ª–Ω–∞—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è"""
    if not await db.is_admin(message.from_user.id):
        await message.answer("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –ø—Ä–æ–≤–æ–¥–∏—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—é.")
        return
    
    report_data = await db.get_stock_report()
    if not report_data:
        await message.answer("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏.")
        return
    
    text = "üìã –ü–æ–ª–Ω–∞—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è:\n\n"
    total_items = 0
    low_stock_count = 0
    total_revenue = 0
    total_cost = 0
    
    for item in report_data:
        name = item['name']
        stock = item['stock']
        min_stock = item['min_stock']
        sold = item['sold']
        price = item['price']
        cost = item.get('cost', 0)
        
        total_items += stock
        if stock <= min_stock:
            low_stock_count += 1
        
        revenue = sold * price
        item_cost = sold * cost
        profit = revenue - item_cost
        
        total_revenue += revenue
        total_cost += item_cost
        
        warning = " ‚ö†Ô∏è" if stock <= min_stock else ""
        text += f"üìö {name}\n"
        text += f"   –û—Å—Ç–∞—Ç–æ–∫: {stock} —à—Ç. (–º–∏–Ω: {min_stock}){warning}\n"
        text += f"   –ü—Ä–æ–¥–∞–Ω–Ω–æ: {sold} —à—Ç. –Ω–∞ {revenue:.0f} —Ä—É–±.\n"
        text += f"   –ü—Ä–∏–±—ã–ª—å: {profit:.0f} —Ä—É–±.\n\n"
    
    total_profit = total_revenue - total_cost
    profit_margin = (total_profit / total_revenue * 100) if total_revenue > 0 else 0
    
    text += f"üìä –ò–¢–û–ì–û:\n"
    text += f"   –ü–æ–∑–∏—Ü–∏–π: {len(report_data)}\n"
    text += f"   –û—Å—Ç–∞—Ç–æ–∫: {total_items} —à—Ç.\n"
    text += f"   –ù–∏–∑–∫–∏–µ –æ—Å—Ç–∞—Ç–∫–∏: {low_stock_count}\n"
    text += f"   –í—ã—Ä—É—á–∫–∞: {total_revenue:.0f} —Ä—É–±.\n"
    text += f"   –ó–∞—Ç—Ä–∞—Ç—ã: {total_cost:.0f} —Ä—É–±.\n"
    text += f"   –ü—Ä–∏–±—ã–ª—å: {total_profit:.0f} —Ä—É–±. ({profit_margin:.1f}%)"
    
    await message.answer(text)

@router.message(Command("analytics"))
async def cmd_analytics(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /analytics - –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å–ø—Ä–æ—Å–∞"""
    if not await db.is_admin(message.from_user.id):
        await message.answer("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É.")
        return
    
    import datetime
    current_date = datetime.date.today()
    current_year = current_date.year
    current_month = current_date.month
    
    # –ü—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü
    if current_month == 1:
        prev_year = current_year - 1
        prev_month = 12
    else:
        prev_year = current_year
        prev_month = current_month - 1
    
    analytics_data = await db.get_demand_analytics(
        current_year, current_month, prev_year, prev_month
    )
    
    if not analytics_data:
        await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏. –ù—É–∂–Ω—ã –¥–∞–Ω–Ω—ã–µ –∑–∞ –º–∏–Ω–∏–º—É–º 2 –º–µ—Å—è—Ü–∞.")
        return
    
    current_period = f"{current_month}.{current_year}"
    previous_period = f"{prev_month}.{prev_year}"
    
    from utils import format_demand_analytics
    text = format_demand_analytics(analytics_data, current_period, previous_period)
    await message.answer(text)

@router.message(Command("profit"))
async def cmd_profit(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /profit - –æ—Ç—á–µ—Ç –ø–æ –ø—Ä–∏–±—ã–ª–∏"""
    if not await db.is_admin(message.from_user.id):
        await message.answer("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –æ—Ç—á–µ—Ç –ø–æ –ø—Ä–∏–±—ã–ª–∏.")
        return
    
    profit_data = await db.get_profit_report()
    from utils import format_profit_report
    text = format_profit_report(profit_data)
    await message.answer(text)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø—Ä–∏—Ö–æ–¥–∞
@router.callback_query(F.data.startswith("arrival_"))
async def process_arrival_item_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø—Ä–∏—Ö–æ–¥–∞"""
    item_id = int(callback.data.split("_")[1])
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
    item = await db.get_item_by_id(item_id)
    if not item:
        await callback.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ç–æ–≤–∞—Ä–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(arrival_item_id=item_id)
    await state.set_state(AdminStates.waiting_for_arrival_quantity)
    
    await callback.message.edit_text(
        f"üì¶ <b>–ü—Ä–∏—Ö–æ–¥ —Ç–æ–≤–∞—Ä–∞</b>\n\n"
        f"–¢–æ–≤–∞—Ä: <b>{item['name']}</b>\n"
        f"–¢–µ–∫—É—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫: <b>{item['stock']} —à—Ç.</b>\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫ –æ—Å—Ç–∞—Ç–∫—É:",
        parse_mode="HTML"
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–ª—è –ø—Ä–∏—Ö–æ–¥–∞
@router.message(AdminStates.waiting_for_arrival_quantity)
async def process_arrival_quantity(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–ª—è –ø—Ä–∏—Ö–æ–¥–∞"""
    try:
        quantity = int(message.text)
        if quantity <= 0:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        item_id = data.get('arrival_item_id')
        
        if not item_id:
            await message.answer("‚ùå –û—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /arrival")
            await state.clear()
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
        item = await db.get_item_by_id(item_id)
        if not item:
            await message.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await state.clear()
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å—Ç–∞—Ç–æ–∫
        new_stock = item['stock'] + quantity
        success = await db.update_stock(item['name'], new_stock)
        
        if success:
            await message.answer(
                f"‚úÖ <b>–ü—Ä–∏—Ö–æ–¥ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω</b>\n\n"
                f"–¢–æ–≤–∞—Ä: <b>{item['name']}</b>\n"
                f"–î–æ–±–∞–≤–ª–µ–Ω–æ: <b>+{quantity} —à—Ç.</b>\n"
                f"–ù–æ–≤—ã–π –æ—Å—Ç–∞—Ç–æ–∫: <b>{new_stock} —à—Ç.</b>",
                parse_mode="HTML"
            )
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Å—Ç–∞—Ç–∫–∞")
        
        await state.clear()
        
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–∏—Ö–æ–¥–∞: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()
