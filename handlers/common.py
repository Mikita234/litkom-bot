import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

# –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, —á—Ç–æ –∏ –≤ main.py
import os
try:
    from db_postgres import db
except ImportError:
    from db import db
from utils import format_price_list, create_items_keyboard, create_quantity_keyboard, create_main_keyboard, create_admin_menu_keyboard, create_reports_keyboard, create_management_keyboard

logger = logging.getLogger(__name__)
router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class SellStates(StatesGroup):
    waiting_for_item = State()
    waiting_for_quantity = State()

@router.message(Command("start"))
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    
    user_id = message.from_user.id
    role = await db.get_user_role(user_id)
    logger.info(f"–†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {role}")
    
    # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –≤ –≥—Ä—É–ø–ø–µ, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if message.chat.type in ['group', 'supergroup']:
        try:
            chat_member = await message.bot.get_chat_member(message.chat.id, user_id)
            if chat_member.status in ['creator', 'administrator'] and not role:
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≥—Ä—É–ø–ø—ã –∫–∞–∫ –≤–µ–¥—É—â–∏—Ö
                await db.add_user(user_id, "leader", message.from_user.full_name)
                role = "leader"
        except Exception:
            pass
    
    if not role:
        text = (
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω–æ–≥–æ –ö–æ–º–∏—Ç–µ—Ç–∞ –ê–ù!\n\n"
            "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /set_admin, —á—Ç–æ–±—ã –Ω–∞–∑–Ω–∞—á–∏—Ç—å —Å–µ–±—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
        )
    elif role == "admin":
        text = (
            "üëë –í—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –±–æ—Ç–∞.\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/add_leader - –¥–æ–±–∞–≤–∏—Ç—å –≤–µ–¥—É—â–µ–≥–æ\n"
            "/add_item - –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é\n"
            "/update_stock - –æ–±–Ω–æ–≤–∏—Ç—å –æ—Å—Ç–∞—Ç–æ–∫\n"
            "/report - –æ—Ç—á—ë—Ç –ø–æ –æ—Å—Ç–∞—Ç–∫–∞–º\n"
            "/inventory - –ø–æ–ª–Ω–∞—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è\n"
            "/low - –Ω–∏–∑–∫–∏–µ –æ—Å—Ç–∞—Ç–∫–∏\n"
            "/reset_sales - –æ–±–Ω—É–ª–∏—Ç—å –ø—Ä–æ–¥–∞–∂–∏\n"
            "/price - –ø—Ä–∞–π—Å-–ª–∏—Å—Ç\n"
            "/sell - –ø—Ä–æ–¥–∞–∂–∞\n"
            "/stock - –æ—Å—Ç–∞—Ç–∫–∏\n"
            "/help - —Å–ø—Ä–∞–≤–∫–∞"
        )
    elif role == "leader":
        text = (
            "üìö –í—ã –≤–µ–¥—É—â–∏–π –±–æ—Ç–∞.\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/price - –ø—Ä–∞–π—Å-–ª–∏—Å—Ç\n"
            "/sell - –ø—Ä–æ–¥–∞–∂–∞\n"
            "/stock - –æ—Å—Ç–∞—Ç–∫–∏\n"
            "/help - —Å–ø—Ä–∞–≤–∫–∞"
        )
    else:
        text = "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
    
    await message.answer(text)
    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {text[:50]}...")

@router.message(Command("help"))
async def cmd_help(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    user_id = message.from_user.id
    role = await db.get_user_role(user_id)
    
    if role == "admin":
        text = (
            "üëë –°–ø—Ä–∞–≤–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n"
            "üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏:\n"
            "‚Ä¢ /add_leader - –¥–æ–±–∞–≤–∏—Ç—å –≤–µ–¥—É—â–µ–≥–æ\n\n"
            "üìö –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–æ–π:\n"
            "‚Ä¢ /add_item - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é\n"
            "‚Ä¢ /update_stock - –æ–±–Ω–æ–≤–∏—Ç—å –æ—Å—Ç–∞—Ç–æ–∫\n"
            "‚Ä¢ /report - –ø–æ–ª–Ω—ã–π –æ—Ç—á—ë—Ç –ø–æ –æ—Å—Ç–∞—Ç–∫–∞–º\n"
            "‚Ä¢ /inventory - –ø–æ–ª–Ω–∞—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è\n"
            "‚Ä¢ /low - –ø–æ–∑–∏—Ü–∏–∏ –Ω–∏–∂–µ –º–∏–Ω–∏–º—É–º–∞\n"
            "‚Ä¢ /reset_sales - –æ–±–Ω—É–ª–∏—Ç—å –ø—Ä–æ–¥–∞–∂–∏ (–Ω–æ–≤—ã–π –º–µ—Å—è—Ü)\n\n"
            "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ —Ñ–∏–Ω–∞–Ω—Å—ã:\n"
            "‚Ä¢ /analytics - –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å–ø—Ä–æ—Å–∞ (–ø—Ä–∏—Ä–æ—Å—Ç/–æ—Ç—Ç–æ–∫)\n"
            "‚Ä¢ /profit - –æ—Ç—á—ë—Ç –ø–æ –ø—Ä–∏–±—ã–ª–∏\n\n"
            "üí∞ –†–∞–±–æ—Ç–∞ —Å –ø—Ä–æ–¥–∞–∂–∞–º–∏:\n"
            "‚Ä¢ /price - –ø—Ä–∞–π—Å-–ª–∏—Å—Ç\n"
            "‚Ä¢ /sell - –æ—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–æ–¥–∞–∂—É\n"
            "‚Ä¢ /stock - —Ç–µ–∫—É—â–∏–µ –æ—Å—Ç–∞—Ç–∫–∏"
        )
    elif role == "leader":
        text = (
            "üìö –°–ø—Ä–∞–≤–∫–∞ –¥–ª—è –≤–µ–¥—É—â–µ–≥–æ:\n\n"
            "üí∞ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "‚Ä¢ /price - –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∞–π—Å-–ª–∏—Å—Ç\n"
            "‚Ä¢ /sell - –æ—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–æ–¥–∞–∂—É\n"
            "‚Ä¢ /stock - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –æ—Å—Ç–∞—Ç–∫–∏\n\n"
            "üí° –î–ª—è –ø—Ä–æ–¥–∞–∂–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /sell, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∑–∏—Ü–∏—é –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ."
        )
    else:
        text = "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É."
    
    await message.answer(text)

@router.message(Command("price"))
async def cmd_price(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /price"""
    user_id = message.from_user.id
    role = await db.get_user_role(user_id)
    
    if role not in ['admin', 'leader']:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    price_data = await db.get_price_list()
    text = format_price_list(price_data)
    await message.answer(text)

@router.message(Command("stock"))
async def cmd_stock(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stock"""
    user_id = message.from_user.id
    role = await db.get_user_role(user_id)
    
    if role not in ['admin', 'leader']:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    report_data = await db.get_stock_report()
    if not report_data:
        await message.answer("üìö –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö.")
        return
    
    text = "üìö –¢–µ–∫—É—â–∏–µ –æ—Å—Ç–∞—Ç–∫–∏:\n\n"
    for item in report_data:
        name = item['name']
        stock = item['stock']
        min_stock = item['min_stock']
        warning = " ‚ö†Ô∏è" if stock <= min_stock else ""
        text += f"{name} ‚Äî {stock}/{min_stock}{warning}\n"
    
    await message.answer(text)

@router.message(Command("sell"))
async def cmd_sell(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /sell"""
    user_id = message.from_user.id
    role = await db.get_user_role(user_id)
    
    if role not in ['admin', 'leader']:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    items = await db.get_all_items()
    if not items:
        await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏.")
        return
    
    keyboard = create_items_keyboard(items, "sell")
    await message.answer(
        "üí∞ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏:",
        reply_markup=keyboard
    )
    await state.set_state(SellStates.waiting_for_item)

@router.callback_query(F.data.startswith("sell_"))
async def process_item_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏"""
    await callback.answer()
    
    item_name = callback.data[5:]  # –£–±–∏—Ä–∞–µ–º "sell_"
    await state.update_data(selected_item=item_name)
    
    keyboard = create_quantity_keyboard()
    await callback.message.edit_text(
        f"üì¶ –í—ã–±—Ä–∞–Ω–æ: {item_name}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:",
        reply_markup=keyboard
    )
    await state.set_state(SellStates.waiting_for_quantity)

@router.callback_query(F.data.startswith("qty_"))
async def process_quantity_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞"""
    await callback.answer()
    
    data = await state.get_data()
    item_name = data.get('selected_item')
    
    if callback.data == "qty_custom":
        await callback.message.edit_text(
            f"üì¶ {item_name}\n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ä—É—á–Ω—É—é:"
        )
        return
    
    try:
        quantity = int(callback.data[4:])  # –£–±–∏—Ä–∞–µ–º "qty_"
        await process_sale(callback, state, item_name, quantity)
    except ValueError:
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ.")

@router.message(SellStates.waiting_for_quantity)
async def process_custom_quantity(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤—Ä—É—á–Ω—É—é"""
    try:
        quantity = int(message.text)
        if quantity <= 0:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0.")
            return
        
        data = await state.get_data()
        item_name = data.get('selected_item')
        
        # –°–æ–∑–¥–∞–µ–º fake callback –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–¥–∞–∂–∏
        class FakeCallback:
            def __init__(self, message):
                self.message = message
                self.data = ""
            
            async def answer(self):
                pass
        
        fake_callback = FakeCallback(message)
        await process_sale(fake_callback, state, item_name, quantity)
        
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

async def process_sale(callback, state: FSMContext, item_name: str, quantity: int):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–¥–∞–∂–∏"""
    success, message_text = await db.sell_item(item_name, quantity)
    
    if success:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—Ç–∞–ª –ª–∏ –æ—Å—Ç–∞—Ç–æ–∫ –Ω–∏–∂–µ –º–∏–Ω–∏–º—É–º–∞
        report_data = await db.get_stock_report()
        for item in report_data:
            if item['name'] == item_name and item['stock'] <= item['min_stock']:
                message_text += f"\n\n‚ö†Ô∏è –û—Å—Ç–∞—Ç–æ–∫ {item_name} –Ω–∏–∂–µ –º–∏–Ω–∏–º—É–º–∞ ({item['stock']}/{item['min_stock']})."
                break
        
        if hasattr(callback, 'message') and hasattr(callback.message, 'edit_text'):
            await callback.message.edit_text(f"‚úÖ {message_text}")
        else:
            await callback.message.answer(f"‚úÖ {message_text}")
    else:
        if hasattr(callback, 'message') and hasattr(callback.message, 'edit_text'):
            await callback.message.edit_text(f"‚ùå {message_text}")
        else:
            await callback.message.answer(f"‚ùå {message_text}")
    
    await state.clear()

@router.callback_query(F.data == "cancel_sell")
async def cancel_sell(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏"""
    await callback.answer()
    await callback.message.edit_text("‚ùå –ü—Ä–æ–¥–∞–∂–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
@router.message(lambda message: message.text == "üëë –°—Ç–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
async def handle_become_admin(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–°—Ç–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º'"""
    user_id = message.from_user.id
    role = await db.get_user_role(user_id)
    
    if role is None:
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        success = await db.add_user(user_id, "admin", message.from_user.full_name)
        if success:
            await message.answer(
                "‚úÖ –í—ã –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!\n\n"
                "–¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞.",
                reply_markup=create_main_keyboard("admin")
            )
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
    else:
        await message.answer("‚ÑπÔ∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —Ä–æ–ª—å –≤ —Å–∏—Å—Ç–µ–º–µ.")

@router.message(lambda message: message.text == "üìö –ü—Ä–∞–π—Å-–ª–∏—Å—Ç")
async def handle_price_list(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ü—Ä–∞–π—Å-–ª–∏—Å—Ç'"""
    price_data = await db.get_stock_report()
    text = format_price_list(price_data)
    await message.answer(text)

@router.message(lambda message: message.text == "üìä –û—Å—Ç–∞—Ç–∫–∏")
async def handle_stock(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–û—Å—Ç–∞—Ç–∫–∏'"""
    report_data = await db.get_stock_report()
    if not report_data:
        await message.answer("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö.")
        return
    
    text = "üìä –¢–µ–∫—É—â–∏–µ –æ—Å—Ç–∞—Ç–∫–∏:\n\n"
    for item in report_data:
        warning = " ‚ö†Ô∏è" if item['stock'] <= item['min_stock'] else ""
        text += f"üìö {item['name']}\n"
        text += f"   –û—Å—Ç–∞—Ç–æ–∫: {item['stock']} —à—Ç.{warning}\n"
        text += f"   –¶–µ–Ω–∞: {item['price']:.0f} z≈Ç\n\n"
    
    await message.answer(text)

@router.message(lambda message: message.text == "üí∞ –ü—Ä–æ–¥–∞–∂–∞")
async def handle_sell_button(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ü—Ä–æ–¥–∞–∂–∞'"""
    user_id = message.from_user.id
    role = await db.get_user_role(user_id)
    
    if role not in ["admin", "leader"]:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ —Ç–æ–≤–∞—Ä–æ–≤.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
    items = await db.get_all_items()
    if not items:
        await message.answer("‚ùå –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏.")
        return
    
    keyboard = create_items_keyboard(items, "sell")
    await message.answer(
        "üí∞ <b>–ü—Ä–æ–¥–∞–∂–∞ —Ç–æ–≤–∞—Ä–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )

@router.message(lambda message: message.text == "üìà –û—Ç—á—ë—Ç—ã")
async def handle_reports_button(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–û—Ç—á—ë—Ç—ã' (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    user_id = message.from_user.id
    role = await db.get_user_role(user_id)
    
    if role != "admin":
        await message.answer("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –æ—Ç—á—ë—Ç—ã.")
        return
    
    keyboard = create_reports_keyboard()
    await message.answer(
        "üìä <b>–û—Ç—á—ë—Ç—ã –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á—ë—Ç–∞:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )

@router.message(lambda message: message.text == "‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
async def handle_management_button(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ' (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    user_id = message.from_user.id
    role = await db.get_user_role(user_id)
    
    if role != "admin":
        await message.answer("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–∏—Å—Ç–µ–º–æ–π.")
        return
    
    keyboard = create_management_keyboard()
    await message.answer(
        "‚öôÔ∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )

@router.message(lambda message: message.text == "‚ùì –ü–æ–º–æ—â—å")
async def handle_help_button(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ü–æ–º–æ—â—å'"""
    user_id = message.from_user.id
    role = await db.get_user_role(user_id)
    
    if role == "admin":
        text = (
            "üëë <b>–°–ø—Ä–∞–≤–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "‚Ä¢ /add_item - –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä\n"
            "‚Ä¢ /update_stock - –æ–±–Ω–æ–≤–∏—Ç—å –æ—Å—Ç–∞—Ç–æ–∫\n"
            "‚Ä¢ /arrival - –ø—Ä–∏—Ö–æ–¥ —Ç–æ–≤–∞—Ä–∞\n"
            "‚Ä¢ /report - –ø–æ–ª–Ω—ã–π –æ—Ç—á—ë—Ç\n"
            "‚Ä¢ /inventory - –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è\n"
            "‚Ä¢ /analytics - –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å–ø—Ä–æ—Å–∞\n"
            "‚Ä¢ /profit - –æ—Ç—á—ë—Ç –ø–æ –ø—Ä–∏–±—ã–ª–∏\n"
            "‚Ä¢ /low - –Ω–∏–∑–∫–∏–µ –æ—Å—Ç–∞—Ç–∫–∏\n"
            "‚Ä¢ /reset_sales - –æ–±–Ω—É–ª–∏—Ç—å –ø—Ä–æ–¥–∞–∂–∏\n"
            "‚Ä¢ /add_leader - –¥–æ–±–∞–≤–∏—Ç—å –≤–µ–¥—É—â–µ–≥–æ\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º!"
        )
    elif role == "leader":
        text = (
            "üìö <b>–°–ø—Ä–∞–≤–∫–∞ –¥–ª—è –≤–µ–¥—É—â–µ–≥–æ</b>\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "‚Ä¢ /price - –ø—Ä–∞–π—Å-–ª–∏—Å—Ç\n"
            "‚Ä¢ /sell - –ø—Ä–æ–¥–∞–∂–∞ —Ç–æ–≤–∞—Ä–∞\n"
            "‚Ä¢ /stock - –æ—Å—Ç–∞—Ç–∫–∏\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º!"
        )
    else:
        text = (
            "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n\n"
            "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–æ–π –ê–ù.\n"
            "–ù–∞–∂–º–∏—Ç–µ 'üëë –°—Ç–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º' –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã."
        )
    
    await message.answer(text, parse_mode="HTML")
