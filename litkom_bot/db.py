import aiosqlite
import logging
from typing import List, Dict, Optional, Tuple
from config import DATABASE_PATH

logger = logging.getLogger(__name__)

class Database:
    def __init__(self, db_path: str = DATABASE_PATH):
        self.db_path = db_path
    
    async def init_db(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü"""
        try:
            async with aiosqlite.connect(self.db_path) as db:
                # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                await db.execute('''
                    CREATE TABLE IF NOT EXISTS users (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        tg_id INTEGER UNIQUE NOT NULL,
                        role TEXT NOT NULL DEFAULT 'user',
                        name TEXT
                    )
                ''')
                
                # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã
                await db.execute('''
                    CREATE TABLE IF NOT EXISTS literature (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        name TEXT UNIQUE NOT NULL,
                        category TEXT,
                        stock INTEGER NOT NULL DEFAULT 0,
                        min_stock INTEGER NOT NULL DEFAULT 0,
                        price REAL NOT NULL DEFAULT 0.0,
                        sold INTEGER NOT NULL DEFAULT 0
                    )
                ''')
                
                await db.commit()
                logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
            raise
    
    async def add_user(self, tg_id: int, role: str, name: str = None) -> bool:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            async with aiosqlite.connect(self.db_path) as db:
                await db.execute(
                    'INSERT OR REPLACE INTO users (tg_id, role, name) VALUES (?, ?, ?)',
                    (tg_id, role, name)
                )
                await db.commit()
                return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return False
    
    async def get_user_role(self, tg_id: int) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            async with aiosqlite.connect(self.db_path) as db:
                async with db.execute(
                    'SELECT role FROM users WHERE tg_id = ?', (tg_id,)
                ) as cursor:
                    row = await cursor.fetchone()
                    return row[0] if row else None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return None
    
    async def is_admin(self, tg_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º"""
        role = await self.get_user_role(tg_id)
        return role == 'admin'
    
    async def is_leader(self, tg_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–µ–¥—É—â–∏–º"""
        role = await self.get_user_role(tg_id)
        return role in ['admin', 'leader']
    
    async def add_item(self, name: str, category: str, price: float, min_stock: int) -> bool:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã"""
        try:
            async with aiosqlite.connect(self.db_path) as db:
                await db.execute(
                    'INSERT OR REPLACE INTO literature (name, category, stock, min_stock, price) VALUES (?, ?, 0, ?, ?)',
                    (name, category, min_stock, price)
                )
                await db.commit()
                logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–∑–∏—Ü–∏—è: {name}")
                return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏: {e}")
            return False
    
    async def update_stock(self, name: str, count: int) -> bool:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–∞"""
        try:
            async with aiosqlite.connect(self.db_path) as db:
                await db.execute(
                    'UPDATE literature SET stock = ? WHERE name = ?',
                    (count, name)
                )
                await db.commit()
                logger.info(f"–û—Å—Ç–∞—Ç–æ–∫ –ø–æ {name} –æ–±–Ω–æ–≤–ª—ë–Ω: {count} —à—Ç.")
                return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–∞: {e}")
            return False
    
    async def sell_item(self, name: str, qty: int) -> Tuple[bool, str]:
        """–ü—Ä–æ–¥–∞–∂–∞ —Ç–æ–≤–∞—Ä–∞"""
        try:
            async with aiosqlite.connect(self.db_path) as db:
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫
                async with db.execute(
                    'SELECT stock, price FROM literature WHERE name = ?', (name,)
                ) as cursor:
                    row = await cursor.fetchone()
                    if not row:
                        return False, "–ü–æ–∑–∏—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
                    
                    current_stock, price = row
                    if current_stock < qty:
                        return False, f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–∞. –î–æ—Å—Ç—É–ø–Ω–æ: {current_stock} —à—Ç."
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å—Ç–∞—Ç–æ–∫ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–Ω–Ω–æ–≥–æ
                    new_stock = current_stock - qty
                    await db.execute(
                        'UPDATE literature SET stock = ?, sold = sold + ? WHERE name = ?',
                        (new_stock, qty, name)
                    )
                    await db.commit()
                    
                    total_price = price * qty
                    message = f"–ü—Ä–æ–¥–∞–Ω–æ: {name} √ó{qty} ‚Äî –æ—Å—Ç–∞–ª–æ—Å—å {new_stock} —à—Ç., —Å—É–º–º–∞ {total_price:.0f} —Ä—É–±."
                    logger.info(f"üí∏ {message}")
                    return True, message
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–¥–∞–∂–∏ —Ç–æ–≤–∞—Ä–∞: {e}")
            return False, f"–û—à–∏–±–∫–∞: {e}"
    
    async def get_stock_report(self) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—á—ë—Ç–∞ –ø–æ –æ—Å—Ç–∞—Ç–∫–∞–º"""
        try:
            async with aiosqlite.connect(self.db_path) as db:
                async with db.execute(
                    'SELECT name, stock, min_stock, sold, price FROM literature ORDER BY name'
                ) as cursor:
                    rows = await cursor.fetchall()
                    return [
                        {
                            'name': row[0],
                            'stock': row[1],
                            'min_stock': row[2],
                            'sold': row[3],
                            'price': row[4]
                        }
                        for row in rows
                    ]
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á—ë—Ç–∞: {e}")
            return []
    
    async def get_low_stock(self) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π —Å –Ω–∏–∑–∫–∏–º –æ—Å—Ç–∞—Ç–∫–æ–º"""
        try:
            async with aiosqlite.connect(self.db_path) as db:
                async with db.execute(
                    'SELECT name, stock, min_stock FROM literature WHERE stock <= min_stock ORDER BY name'
                ) as cursor:
                    rows = await cursor.fetchall()
                    return [
                        {
                            'name': row[0],
                            'stock': row[1],
                            'min_stock': row[2]
                        }
                        for row in rows
                    ]
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∏–∑–∫–∏—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤: {e}")
            return []
    
    async def get_price_list(self) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞"""
        try:
            async with aiosqlite.connect(self.db_path) as db:
                async with db.execute(
                    'SELECT name, price FROM literature WHERE stock > 0 ORDER BY name'
                ) as cursor:
                    rows = await cursor.fetchall()
                    return [
                        {
                            'name': row[0],
                            'price': row[1]
                        }
                        for row in rows
                    ]
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–π—Å–∞: {e}")
            return []
    
    async def get_all_items(self) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π –¥–ª—è inline-–∫–Ω–æ–ø–æ–∫"""
        try:
            async with aiosqlite.connect(self.db_path) as db:
                async with db.execute(
                    'SELECT name FROM literature WHERE stock > 0 ORDER BY name'
                ) as cursor:
                    rows = await cursor.fetchall()
                    return [row[0] for row in rows]
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–∑–∏—Ü–∏–π: {e}")
            return []
    
    async def reset_sales(self) -> bool:
        """–û–±–Ω—É–ª–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂"""
        try:
            async with aiosqlite.connect(self.db_path) as db:
                await db.execute('UPDATE literature SET sold = 0')
                await db.commit()
                logger.info("–ü—Ä–æ–¥–∞–∂–∏ –æ–±–Ω—É–ª–µ–Ω—ã")
                return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω—É–ª–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∂: {e}")
            return False

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database()
