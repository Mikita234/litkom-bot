import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, ChatTypeFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from db import db
from utils import format_stock_report, format_low_stock

logger = logging.getLogger(__name__)
router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class AdminStates(StatesGroup):
    waiting_for_admin_confirmation = State()
    waiting_for_leader_id = State()
    waiting_for_item_name = State()
    waiting_for_item_category = State()
    waiting_for_item_price = State()
    waiting_for_item_min_stock = State()
    waiting_for_stock_name = State()
    waiting_for_stock_count = State()

@router.message(Command("set_admin"))
async def cmd_set_admin(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /set_admin"""
    user_id = message.from_user.id
    current_role = await db.get_user_role(user_id)
    
    if current_role == "admin":
        await message.answer("üëë –í—ã —É–∂–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        return
    
    if current_role is None:
        # –ü–µ—Ä–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –∞–¥–º–∏–Ω–æ–º
        success = await db.add_user(user_id, "admin", message.from_user.full_name)
        if success:
            await message.answer(
                "üëë –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –±–æ—Ç–∞.\n\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
                "‚Ä¢ –î–æ–±–∞–≤–ª—è—Ç—å –≤–µ–¥—É—â–∏—Ö –∫–æ–º–∞–Ω–¥–æ–π /add_leader\n"
                "‚Ä¢ –£–ø—Ä–∞–≤–ª—è—Ç—å –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–æ–π\n"
                "‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –æ—Ç—á—ë—Ç—ã\n"
                "‚Ä¢ –û–±–Ω—É–ª—è—Ç—å –ø—Ä–æ–¥–∞–∂–∏"
            )
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    else:
        await message.answer("‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —Ä–æ–ª—å –≤ —Å–∏—Å—Ç–µ–º–µ.")

@router.message(Command("add_leader"))
async def cmd_add_leader(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add_leader"""
    if not await db.is_admin(message.from_user.id):
        await message.answer("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –≤–µ–¥—É—â–∏—Ö.")
        return
    
    await message.answer(
        "üë• –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–µ–¥—É—â–µ–≥–æ\n\n"
        "–ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –≤–µ–¥—É—â–∏–º, "
        "–∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ Telegram ID:"
    )
    await state.set_state(AdminStates.waiting_for_leader_id)

@router.message(AdminStates.waiting_for_leader_id)
async def process_leader_id(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ ID –≤–µ–¥—É—â–µ–≥–æ"""
    try:
        if message.forward_from:
            # –ï—Å–ª–∏ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            leader_id = message.forward_from.id
            leader_name = message.forward_from.full_name
        else:
            # –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω ID –≤—Ä—É—á–Ω—É—é
            leader_id = int(message.text)
            leader_name = None
        
        success = await db.add_user(leader_id, "leader", leader_name)
        if success:
            await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {leader_id} –Ω–∞–∑–Ω–∞—á–µ–Ω –≤–µ–¥—É—â–∏–º.")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤–µ–¥—É—â–µ–≥–æ.")
        
        await state.clear()
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Telegram ID (—á–∏—Å–ª–æ).")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–µ–¥—É—â–µ–≥–æ: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤–µ–¥—É—â–µ–≥–æ.")

@router.message(Command("add_item"))
async def cmd_add_item(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add_item"""
    if not await db.is_admin(message.from_user.id):
        await message.answer("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –ø–æ–∑–∏—Ü–∏–∏.")
        return
    
    await message.answer("üìö –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
    await state.set_state(AdminStates.waiting_for_item_name)

@router.message(AdminStates.waiting_for_item_name)
async def process_item_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏"""
    await state.update_data(item_name=message.text)
    await message.answer("üìÇ –í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:")
    await state.set_state(AdminStates.waiting_for_item_category)

@router.message(AdminStates.waiting_for_item_category)
async def process_item_category(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∑–∏—Ü–∏–∏"""
    await state.update_data(item_category=message.text)
    await message.answer("üí∞ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É (–≤ —Ä—É–±–ª—è—Ö):")
    await state.set_state(AdminStates.waiting_for_item_price)

@router.message(AdminStates.waiting_for_item_price)
async def process_item_price(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–Ω—ã –ø–æ–∑–∏—Ü–∏–∏"""
    try:
        price = float(message.text)
        if price < 0:
            await message.answer("‚ùå –¶–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π.")
            return
        
        await state.update_data(item_price=price)
        await message.answer("üìä –í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫:")
        await state.set_state(AdminStates.waiting_for_item_min_stock)
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (—á–∏—Å–ª–æ).")

@router.message(AdminStates.waiting_for_item_min_stock)
async def process_item_min_stock(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –æ—Å—Ç–∞—Ç–∫–∞"""
    try:
        min_stock = int(message.text)
        if min_stock < 0:
            await message.answer("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º.")
            return
        
        data = await state.get_data()
        success = await db.add_item(
            data['item_name'],
            data['item_category'],
            data['item_price'],
            min_stock
        )
        
        if success:
            await message.answer(
                f"‚úÖ –ü–æ–∑–∏—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞:\n"
                f"üìö {data['item_name']}\n"
                f"üìÇ {data['item_category']}\n"
                f"üí∞ {data['item_price']:.0f} —Ä—É–±.\n"
                f"üìä –ú–∏–Ω. –æ—Å—Ç–∞—Ç–æ–∫: {min_stock} —à—Ç."
            )
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–∏.")
        
        await state.clear()
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –æ—Å—Ç–∞—Ç–∫–∞.")

@router.message(Command("update_stock"))
async def cmd_update_stock(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /update_stock"""
    if not await db.is_admin(message.from_user.id):
        await message.answer("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å –æ—Å—Ç–∞—Ç–∫–∏.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π
    report_data = await db.get_stock_report()
    if not report_data:
        await message.answer("‚ùå –ù–µ—Ç –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
        return
    
    text = "üìö –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–∞:\n\n"
    for i, item in enumerate(report_data, 1):
        text += f"{i}. {item['name']} (—Ç–µ–∫—É—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫: {item['stock']})\n"
    
    await message.answer(text)
    await state.set_state(AdminStates.waiting_for_stock_name)

@router.message(AdminStates.waiting_for_stock_name)
async def process_stock_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–∞"""
    item_name = message.text
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–∑–∏—Ü–∏—è
    report_data = await db.get_stock_report()
    item_exists = any(item['name'] == item_name for item in report_data)
    
    if not item_exists:
        await message.answer("‚ùå –ü–æ–∑–∏—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")
        return
    
    await state.update_data(stock_name=item_name)
    await message.answer(f"üìä –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –æ—Å—Ç–∞—Ç–æ–∫ –¥–ª—è '{item_name}':")
    await state.set_state(AdminStates.waiting_for_stock_count)

@router.message(AdminStates.waiting_for_stock_count)
async def process_stock_count(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–∞"""
    try:
        count = int(message.text)
        if count < 0:
            await message.answer("‚ùå –û—Å—Ç–∞—Ç–æ–∫ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º.")
            return
        
        data = await state.get_data()
        item_name = data['stock_name']
        
        success = await db.update_stock(item_name, count)
        if success:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—Ç–∞–ª –ª–∏ –æ—Å—Ç–∞—Ç–æ–∫ –Ω–∏–∂–µ –º–∏–Ω–∏–º—É–º–∞
            report_data = await db.get_stock_report()
            for item in report_data:
                if item['name'] == item_name and item['stock'] <= item['min_stock']:
                    await message.answer(
                        f"‚úÖ –û—Å—Ç–∞—Ç–æ–∫ –ø–æ {item_name} –æ–±–Ω–æ–≤–ª—ë–Ω: {count} —à—Ç.\n\n"
                        f"‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –û—Å—Ç–∞—Ç–æ–∫ {item_name} –Ω–∏–∂–µ –º–∏–Ω–∏–º—É–º–∞ ({item['stock']}/{item['min_stock']})."
                    )
                    return
            await message.answer(f"‚úÖ –û—Å—Ç–∞—Ç–æ–∫ –ø–æ {item_name} –æ–±–Ω–æ–≤–ª—ë–Ω: {count} —à—Ç.")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Å—Ç–∞—Ç–∫–∞.")
        
        await state.clear()
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")

@router.message(Command("report"))
async def cmd_report(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /report"""
    if not await db.is_admin(message.from_user.id):
        await message.answer("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –æ—Ç—á—ë—Ç—ã.")
        return
    
    report_data = await db.get_stock_report()
    text = format_stock_report(report_data)
    await message.answer(text)

@router.message(Command("low"))
async def cmd_low(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /low"""
    if not await db.is_admin(message.from_user.id):
        await message.answer("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –Ω–∏–∑–∫–∏–µ –æ—Å—Ç–∞—Ç–∫–∏.")
        return
    
    low_stock_data = await db.get_low_stock()
    text = format_low_stock(low_stock_data)
    await message.answer(text)

@router.message(Command("reset_sales"))
async def cmd_reset_sales(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /reset_sales"""
    if not await db.is_admin(message.from_user.id):
        await message.answer("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –æ–±–Ω—É–ª—è—Ç—å –ø—Ä–æ–¥–∞–∂–∏.")
        return
    
    success = await db.reset_sales()
    if success:
        await message.answer("‚úÖ –ü—Ä–æ–¥–∞–∂–∏ –æ–±–Ω—É–ª–µ–Ω—ã. –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π –º–µ—Å—è—Ü!")
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω—É–ª–µ–Ω–∏–∏ –ø—Ä–æ–¥–∞–∂.")

@router.message(Command("inventory"))
async def cmd_inventory(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /inventory - –ø–æ–ª–Ω–∞—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è"""
    if not await db.is_admin(message.from_user.id):
        await message.answer("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –ø—Ä–æ–≤–æ–¥–∏—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—é.")
        return
    
    report_data = await db.get_stock_report()
    if not report_data:
        await message.answer("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏.")
        return
    
    text = "üìã –ü–æ–ª–Ω–∞—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è:\n\n"
    total_items = 0
    low_stock_count = 0
    
    for item in report_data:
        name = item['name']
        stock = item['stock']
        min_stock = item['min_stock']
        sold = item['sold']
        price = item['price']
        
        total_items += stock
        if stock <= min_stock:
            low_stock_count += 1
        
        warning = " ‚ö†Ô∏è" if stock <= min_stock else ""
        text += f"üìö {name}\n"
        text += f"   –û—Å—Ç–∞—Ç–æ–∫: {stock} —à—Ç. (–º–∏–Ω: {min_stock}){warning}\n"
        text += f"   –ü—Ä–æ–¥–∞–Ω–Ω–æ: {sold} —à—Ç. –Ω–∞ {sold * price:.0f} —Ä—É–±.\n\n"
    
    text += f"üìä –ò—Ç–æ–≥–æ –ø–æ–∑–∏—Ü–∏–π: {len(report_data)}\n"
    text += f"üì¶ –û–±—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫: {total_items} —à—Ç.\n"
    text += f"‚ö†Ô∏è –ù–∏–∑–∫–∏–µ –æ—Å—Ç–∞—Ç–∫–∏: {low_stock_count} –ø–æ–∑–∏—Ü–∏–π"
    
    await message.answer(text)
