import logging
import asyncio
from typing import List, Dict
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª—å –∏ —Ñ–∞–π–ª"""
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        handlers=[
            logging.FileHandler('bot.log', encoding='utf-8'),
            logging.StreamHandler()
        ]
    )

def format_stock_report(report_data: List[Dict]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á—ë—Ç–∞ –ø–æ –æ—Å—Ç–∞—Ç–∫–∞–º"""
    if not report_data:
        return "üìö –û—Ç—á—ë—Ç –ø–æ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–µ:\n–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
    
    total_sales = 0
    report_lines = ["üìö –û—Ç—á—ë—Ç –ø–æ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–µ:"]
    
    for item in report_data:
        name = item['name']
        stock = item['stock']
        min_stock = item['min_stock']
        sold = item['sold']
        price = item['price']
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∏–∑–∫–∏–π –æ—Å—Ç–∞—Ç–æ–∫
        warning = " ‚ö†Ô∏è" if stock <= min_stock else ""
        
        report_lines.append(f"{name} ‚Äî {stock}/{min_stock}{warning}")
        total_sales += sold * price
    
    report_lines.append(f"\n–û–±—â–∞—è —Å—É–º–º–∞ –ø—Ä–æ–¥–∞–∂: {total_sales:.0f} —Ä—É–±.")
    return "\n".join(report_lines)

def format_price_list(price_data: List[Dict]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞"""
    if not price_data:
        return "üí∞ –ü—Ä–∞–π—Å-–ª–∏—Å—Ç:\n–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π"
    
    price_lines = ["üí∞ –ü—Ä–∞–π—Å-–ª–∏—Å—Ç:"]
    for item in price_data:
        price_lines.append(f"{item['name']} ‚Äî {item['price']:.0f} —Ä—É–±.")
    
    return "\n".join(price_lines)

def format_low_stock(low_stock_data: List[Dict]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –Ω–∏–∑–∫–∏—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤"""
    if not low_stock_data:
        return "‚úÖ –í—Å–µ –æ—Å—Ç–∞—Ç–∫–∏ –≤ –Ω–æ—Ä–º–µ"
    
    warning_lines = ["‚ö†Ô∏è –ü–æ–∑–∏—Ü–∏–∏ –Ω–∏–∂–µ –º–∏–Ω–∏–º—É–º–∞:"]
    for item in low_stock_data:
        warning_lines.append(f"{item['name']} ‚Äî {item['stock']}/{item['min_stock']}")
    
    return "\n".join(warning_lines)

def create_items_keyboard(items: List[str]) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –ø–æ–∑–∏—Ü–∏—è–º–∏ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏"""
    keyboard = []
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –ø–æ 2 –∫–Ω–æ–ø–∫–∏
    for i in range(0, len(items), 2):
        row = []
        for j in range(2):
            if i + j < len(items):
                item = items[i + j]
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –∫–Ω–æ–ø–∫–∏
                button_text = item[:20] + "..." if len(item) > 20 else item
                row.append(InlineKeyboardButton(
                    text=button_text,
                    callback_data=f"sell_{item}"
                ))
        keyboard.append(row)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    keyboard.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_sell")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def create_quantity_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞"""
    keyboard = [
        [
            InlineKeyboardButton(text="1", callback_data="qty_1"),
            InlineKeyboardButton(text="2", callback_data="qty_2"),
            InlineKeyboardButton(text="3", callback_data="qty_3")
        ],
        [
            InlineKeyboardButton(text="5", callback_data="qty_5"),
            InlineKeyboardButton(text="10", callback_data="qty_10"),
            InlineKeyboardButton(text="–î—Ä—É–≥–æ–µ", callback_data="qty_custom")
        ],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_sell")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

async def keep_alive():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –Ω–∞ Render.com"""
    while True:
        await asyncio.sleep(60)
