import logging
import asyncio
from typing import List, Dict
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª—å –∏ —Ñ–∞–π–ª"""
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        handlers=[
            logging.FileHandler('bot.log', encoding='utf-8'),
            logging.StreamHandler()
        ]
    )

def format_stock_report(report_data: List[Dict]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á—ë—Ç–∞ –ø–æ –æ—Å—Ç–∞—Ç–∫–∞–º"""
    if not report_data:
        return "üìö –û—Ç—á—ë—Ç –ø–æ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–µ:\n–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
    
    total_sales = 0
    report_lines = ["üìö –û—Ç—á—ë—Ç –ø–æ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–µ:"]
    
    for item in report_data:
        name = item['name']
        stock = item['stock']
        min_stock = item['min_stock']
        sold = item['sold']
        price = item['price']
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∏–∑–∫–∏–π –æ—Å—Ç–∞—Ç–æ–∫
        warning = " ‚ö†Ô∏è" if stock <= min_stock else ""
        
        report_lines.append(f"{name} ‚Äî {stock}/{min_stock}{warning}")
        total_sales += sold * price
    
    report_lines.append(f"\n–û–±—â–∞—è —Å—É–º–º–∞ –ø—Ä–æ–¥–∞–∂: {total_sales:.0f} —Ä—É–±.")
    return "\n".join(report_lines)

def format_price_list(price_data: List[Dict]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞"""
    if not price_data:
        return "üí∞ –ü—Ä–∞–π—Å-–ª–∏—Å—Ç:\n–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π"
    
    price_lines = ["üí∞ –ü—Ä–∞–π—Å-–ª–∏—Å—Ç:"]
    for item in price_data:
        price_lines.append(f"{item['name']} ‚Äî {item['price']:.0f} —Ä—É–±.")
    
    return "\n".join(price_lines)

def format_low_stock(low_stock_data: List[Dict]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –Ω–∏–∑–∫–∏—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤"""
    if not low_stock_data:
        return "‚úÖ –í—Å–µ –æ—Å—Ç–∞—Ç–∫–∏ –≤ –Ω–æ—Ä–º–µ"
    
    warning_lines = ["‚ö†Ô∏è –ü–æ–∑–∏—Ü–∏–∏ –Ω–∏–∂–µ –º–∏–Ω–∏–º—É–º–∞:"]
    for item in low_stock_data:
        warning_lines.append(f"{item['name']} ‚Äî {item['stock']}/{item['min_stock']}")
    
    return "\n".join(warning_lines)

def create_items_keyboard(items: List[str]) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –ø–æ–∑–∏—Ü–∏—è–º–∏ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏"""
    keyboard = []
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –ø–æ 2 –∫–Ω–æ–ø–∫–∏
    for i in range(0, len(items), 2):
        row = []
        for j in range(2):
            if i + j < len(items):
                item = items[i + j]
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –∫–Ω–æ–ø–∫–∏
                button_text = item[:20] + "..." if len(item) > 20 else item
                row.append(InlineKeyboardButton(
                    text=button_text,
                    callback_data=f"sell_{item}"
                ))
        keyboard.append(row)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    keyboard.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_sell")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def create_quantity_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞"""
    keyboard = [
        [
            InlineKeyboardButton(text="1", callback_data="qty_1"),
            InlineKeyboardButton(text="2", callback_data="qty_2"),
            InlineKeyboardButton(text="3", callback_data="qty_3")
        ],
        [
            InlineKeyboardButton(text="5", callback_data="qty_5"),
            InlineKeyboardButton(text="10", callback_data="qty_10"),
            InlineKeyboardButton(text="–î—Ä—É–≥–æ–µ", callback_data="qty_custom")
        ],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_sell")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def format_demand_analytics(analytics_data: List[Dict], current_period: str, previous_period: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –ø–æ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ —Å–ø—Ä–æ—Å–∞"""
    if not analytics_data:
        return "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å–ø—Ä–æ—Å–∞:\n–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"
    
    text = f"üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å–ø—Ä–æ—Å–∞ ({current_period} vs {previous_period}):\n\n"
    
    total_current = 0
    total_previous = 0
    total_revenue_current = 0
    total_revenue_previous = 0
    
    for item in analytics_data:
        name = item['name']
        current_sold = item['current_sold']
        previous_sold = item['previous_sold']
        demand_change = item['demand_change']
        current_revenue = item['current_revenue']
        previous_revenue = item['previous_revenue']
        revenue_change = item['revenue_change']
        
        total_current += current_sold
        total_previous += previous_sold
        total_revenue_current += current_revenue
        total_revenue_previous += previous_revenue
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç—Ä–µ–Ω–¥
        if demand_change > 0:
            trend = f"üìà +{demand_change}"
        elif demand_change < 0:
            trend = f"üìâ {demand_change}"
        else:
            trend = "‚û°Ô∏è 0"
        
        text += f"üìö {name}:\n"
        text += f"   {current_period}: {current_sold} —à—Ç. ({current_revenue:.0f} —Ä—É–±.)\n"
        text += f"   {previous_period}: {previous_sold} —à—Ç. ({previous_revenue:.0f} —Ä—É–±.)\n"
        text += f"   –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {trend}\n\n"
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_change = total_current - total_previous
    total_revenue_change = total_revenue_current - total_revenue_previous
    
    if total_change > 0:
        total_trend = f"üìà +{total_change}"
    elif total_change < 0:
        total_trend = f"üìâ {total_change}"
    else:
        total_trend = "‚û°Ô∏è 0"
    
    text += f"üìä –ò–¢–û–ì–û:\n"
    text += f"   –ü—Ä–æ–¥–∞–∂–∏: {total_current} ‚Üí {total_previous} ({total_trend})\n"
    text += f"   –í—ã—Ä—É—á–∫–∞: {total_revenue_current:.0f} ‚Üí {total_revenue_previous:.0f} —Ä—É–±. ({total_revenue_change:+.0f})\n"
    
    return text

def format_profit_report(profit_data: Dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –ø–æ –ø—Ä–∏–±—ã–ª–∏"""
    text = "üí∞ –û—Ç—á–µ—Ç –ø–æ –ø—Ä–∏–±—ã–ª–∏:\n\n"
    text += f"üìà –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: {profit_data['total_revenue']:.0f} —Ä—É–±.\n"
    text += f"üí∏ –û–±—â–∏–µ –∑–∞—Ç—Ä–∞—Ç—ã: {profit_data['total_cost']:.0f} —Ä—É–±.\n"
    text += f"üíé –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: {profit_data['total_profit']:.0f} —Ä—É–±.\n"
    text += f"üìä –ú–∞—Ä–∂–∞ –ø—Ä–∏–±—ã–ª–∏: {profit_data['profit_margin']:.1f}%\n"
    
    return text

async def keep_alive():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –Ω–∞ Render.com"""
    while True:
        await asyncio.sleep(60)
