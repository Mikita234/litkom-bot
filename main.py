import asyncio
import logging
import os
from aiogram import Bot, Dispatcher
from aiogram.filters import Command
from aiogram.types import Message

from config import TELEGRAM_TOKEN, DATABASE_PATH
# –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º PostgreSQL –Ω–∞ Render.com
try:
    from db_postgres import db
    print("üìä –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è PostgreSQL")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ PostgreSQL: {e}")
    # Fallback –Ω–∞ SQLite —Ç–æ–ª—å–∫–æ –≤ –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ
    from db import db
    print("üìä Fallback –Ω–∞ SQLite")
from utils import setup_logging, keep_alive
from handlers import admin, leader, common

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
setup_logging()
logger = logging.getLogger(__name__)

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        os.makedirs(os.path.dirname(DATABASE_PATH), exist_ok=True)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await db.init_database()
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ, –µ—Å–ª–∏ –Ω–µ—Ç - –∑–∞–≥—Ä—É–∂–∞–µ–º –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—É
        items = await db.get_all_items()
        if not items:
            logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞, –∑–∞–≥—Ä—É–∂–∞–µ–º –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—É...")
            try:
                from load_literature import LITERATURE_DATA
                for name, category, price, cost, min_stock in LITERATURE_DATA:
                    await db.add_item(name, category, price, cost, min_stock)
                logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(LITERATURE_DATA)} –ø–æ–∑–∏—Ü–∏–π –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã: {e}")
        else:
            logger.info(f"–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö {len(items)} –ø–æ–∑–∏—Ü–∏–π –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã")
        
        # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
        bot = Bot(token=TELEGRAM_TOKEN)
        dp = Dispatcher()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä—ã
        dp.include_router(admin.router)
        dp.include_router(leader.router)
        dp.include_router(common.router)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ handlers/
        
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        
        # –î–ª—è Render.com –¥–æ–±–∞–≤–ª—è–µ–º HTTP —Å–µ—Ä–≤–µ—Ä
        import aiohttp
        from aiohttp import web
        
        async def health_check(request):
            return web.Response(text="Bot is running", status=200)
        
        # –°–æ–∑–¥–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä
        app = web.Application()
        app.router.add_get('/', health_check)
        app.router.add_get('/health', health_check)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä –≤ —Ñ–æ–Ω–µ
        runner = web.AppRunner(app)
        await runner.setup()
        site = web.TCPSite(runner, '0.0.0.0', 10000)
        await site.start()
        logger.info("HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 10000")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        await dp.start_polling(bot)
        
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise
    finally:
        if 'bot' in locals():
            await bot.session.close()

if __name__ == "__main__":
    try:
        # –î–ª—è Render.com –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—É—Å–∫
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
