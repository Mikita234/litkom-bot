#!/usr/bin/env python3
"""
–ú–∏–≥—Ä–∞—Ü–∏—è —Å SQLite –Ω–∞ PostgreSQL –¥–ª—è Render.com
–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –≤ PostgreSQL –∏ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç –¥–∞–Ω–Ω—ã–µ
"""

import asyncio
import asyncpg
import aiosqlite
import os
from config import DATABASE_PATH

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ PostgreSQL –¥–ª—è Render.com
DATABASE_URL = os.getenv('DATABASE_URL')  # Render.com –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç

async def migrate_to_postgres():
    """–ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ SQLite –≤ PostgreSQL"""
    
    if not DATABASE_URL:
        print("‚ùå DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞.")
        return
    
    print("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –≤ PostgreSQL...")
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ PostgreSQL
    conn = await asyncpg.connect(DATABASE_URL)
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –≤ PostgreSQL
        await conn.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id SERIAL PRIMARY KEY,
                tg_id BIGINT UNIQUE NOT NULL,
                role TEXT NOT NULL,
                name TEXT
            )
        ''')
        
        await conn.execute('''
            CREATE TABLE IF NOT EXISTS literature (
                id SERIAL PRIMARY KEY,
                name TEXT UNIQUE NOT NULL,
                category TEXT,
                stock INTEGER NOT NULL DEFAULT 0,
                min_stock INTEGER NOT NULL DEFAULT 0,
                price REAL NOT NULL DEFAULT 0.0,
                cost REAL NOT NULL DEFAULT 0.0,
                sold INTEGER NOT NULL DEFAULT 0
            )
        ''')
        
        await conn.execute('''
            CREATE TABLE IF NOT EXISTS monthly_sales (
                id SERIAL PRIMARY KEY,
                item_id INTEGER NOT NULL,
                year INTEGER NOT NULL,
                month INTEGER NOT NULL,
                sold_quantity INTEGER NOT NULL DEFAULT 0,
                total_revenue REAL NOT NULL DEFAULT 0.0,
                total_cost REAL NOT NULL DEFAULT 0.0,
                FOREIGN KEY (item_id) REFERENCES literature(id),
                UNIQUE(item_id, year, month)
            )
        ''')
        
        print("‚úÖ –¢–∞–±–ª–∏—Ü—ã PostgreSQL —Å–æ–∑–¥–∞–Ω—ã")
        
        # –ü–µ—Ä–µ–Ω–æ—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ SQLite (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if os.path.exists(DATABASE_PATH):
            print("üì¶ –ü–µ—Ä–µ–Ω–æ—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ SQLite...")
            
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ SQLite
            sqlite_conn = await aiosqlite.connect(DATABASE_PATH)
            
            # –ü–µ—Ä–µ–Ω–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            cursor = await sqlite_conn.execute('SELECT tg_id, role, name FROM users')
            users = await cursor.fetchall()
            
            for user in users:
                await conn.execute(
                    'INSERT INTO users (tg_id, role, name) VALUES ($1, $2, $3) ON CONFLICT (tg_id) DO NOTHING',
                    user[0], user[1], user[2]
                )
            
            # –ü–µ—Ä–µ–Ω–æ—Å–∏–º –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—É
            cursor = await sqlite_conn.execute(
                'SELECT name, category, stock, min_stock, price, cost, sold FROM literature'
            )
            items = await cursor.fetchall()
            
            for item in items:
                await conn.execute(
                    '''INSERT INTO literature (name, category, stock, min_stock, price, cost, sold) 
                       VALUES ($1, $2, $3, $4, $5, $6, $7) ON CONFLICT (name) DO NOTHING''',
                    item[0], item[1], item[2], item[3], item[4], item[5], item[6]
                )
            
            await sqlite_conn.close()
            print(f"‚úÖ –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ {len(items)} –ø–æ–∑–∏—Ü–∏–π –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã")
        
        print("üéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
    finally:
        await conn.close()

if __name__ == "__main__":
    asyncio.run(migrate_to_postgres())
