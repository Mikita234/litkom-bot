import logging
import asyncio
from typing import List, Dict
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª—å –∏ —Ñ–∞–π–ª"""
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        handlers=[
            logging.FileHandler('bot.log', encoding='utf-8'),
            logging.StreamHandler()
        ]
    )

def format_stock_report(report_data: List[Dict]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á—ë—Ç–∞ –ø–æ –æ—Å—Ç–∞—Ç–∫–∞–º"""
    if not report_data:
        return "üìö –û—Ç—á—ë—Ç –ø–æ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–µ:\n–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
    
    total_sales = 0
    report_lines = ["üìö –û—Ç—á—ë—Ç –ø–æ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–µ:"]
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    max_items = 20
    items_to_show = report_data[:max_items]
    
    for item in items_to_show:
        name = item['name']
        stock = item['stock']
        min_stock = item['min_stock']
        sold = item['sold']
        price = item['price']
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∏–∑–∫–∏–π –æ—Å—Ç–∞—Ç–æ–∫
        warning = " ‚ö†Ô∏è" if stock <= min_stock else ""
        
        # –°–æ–∫—Ä–∞—â–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
        display_name = name[:30] + "..." if len(name) > 30 else name
        report_lines.append(f"{display_name} ‚Äî {stock}/{min_stock}{warning}")
        total_sales += sold * price
    
    # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä–æ–≤ –±–æ–ª—å—à–µ –ª–∏–º–∏—Ç–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    if len(report_data) > max_items:
        report_lines.append(f"\n... –∏ –µ—â—ë {len(report_data) - max_items} –ø–æ–∑–∏—Ü–∏–π")
    
    report_lines.append(f"\n–û–±—â–∞—è —Å—É–º–º–∞ –ø—Ä–æ–¥–∞–∂: {total_sales:.0f} z≈Ç")
    return "\n".join(report_lines)

def format_price_list(price_data: List[Dict]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞"""
    if not price_data:
        return "üí∞ –ü—Ä–∞–π—Å-–ª–∏—Å—Ç:\n–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π"
    
    price_lines = ["üí∞ –ü—Ä–∞–π—Å-–ª–∏—Å—Ç:"]
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    max_items = 25
    items_to_show = price_data[:max_items]
    
    for item in items_to_show:
        name = item['name']
        price = item['price']
        
        # –°–æ–∫—Ä–∞—â–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
        display_name = name[:25] + "..." if len(name) > 25 else name
        price_lines.append(f"{display_name} ‚Äî {price:.0f} z≈Ç")
    
    # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä–æ–≤ –±–æ–ª—å—à–µ –ª–∏–º–∏—Ç–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    if len(price_data) > max_items:
        price_lines.append(f"\n... –∏ –µ—â—ë {len(price_data) - max_items} –ø–æ–∑–∏—Ü–∏–π")
    
    return "\n".join(price_lines)

def format_low_stock(low_stock_data: List[Dict]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –Ω–∏–∑–∫–∏—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤"""
    if not low_stock_data:
        return "‚úÖ –í—Å–µ –æ—Å—Ç–∞—Ç–∫–∏ –≤ –Ω–æ—Ä–º–µ"
    
    warning_lines = ["‚ö†Ô∏è –ü–æ–∑–∏—Ü–∏–∏ –Ω–∏–∂–µ –º–∏–Ω–∏–º—É–º–∞:"]
    for item in low_stock_data:
        warning_lines.append(f"{item['name']} ‚Äî {item['stock']}/{item['min_stock']}")
    
    return "\n".join(warning_lines)

def create_items_keyboard(items: list, action: str = "sell", show_categories: bool = False) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –ø–æ–∑–∏—Ü–∏—è–º–∏ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π"""
    keyboard = []

    # –ï—Å–ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    if show_categories:
        # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        categories = {}
        for item in items:
            if isinstance(item, dict):
                category = item.get('category', '–î—Ä—É–≥–∏–µ')
                if category not in categories:
                    categories[category] = []
                categories[category].append(item)

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        for category in sorted(categories.keys()):
            keyboard.append([InlineKeyboardButton(
                text=f"üìÇ {category}",
                callback_data=f"category_{category}"
            )])

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í—Å–µ —Ç–æ–≤–∞—Ä—ã"
        keyboard.append([InlineKeyboardButton(
            text="üìö –í—Å–µ —Ç–æ–≤–∞—Ä—ã",
            callback_data="category_all"
        )])
    else:
        # –û–±—ã—á–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –ø–æ 2 –∫–Ω–æ–ø–∫–∏
        for i in range(0, len(items), 2):
            row = []
            for j in range(2):
                if i + j < len(items):
                    item = items[i + j]

                    # –ï—Å–ª–∏ item - —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å, –±–µ—Ä–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
                    if isinstance(item, dict):
                        item_name = item['name']
                        item_id = item['id']
                    else:
                        item_name = item
                        item_id = None

                    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –∫–Ω–æ–ø–∫–∏
                    button_text = item_name[:20] + "..." if len(item_name) > 20 else item_name

                    # –§–æ—Ä–º–∏—Ä—É–µ–º callback_data –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–µ–π—Å—Ç–≤–∏—è
                    if action == "sell":
                        callback_data = f"sell_{item_id}"
                    elif action == "arrival":
                        callback_data = f"arrival_{item_id}"
                    elif action == "edit_item":
                        callback_data = f"edit_item_{item_id}"
                    elif action == "delete_item":
                        callback_data = f"delete_item_{item_id}"
                    elif action == "change_price":
                        callback_data = f"change_price_{item_id}"
                    elif action == "change_name":
                        callback_data = f"change_name_{item_id}"
                    else:
                        callback_data = f"sell_{item_id}"

                    row.append(InlineKeyboardButton(
                        text=button_text,
                        callback_data=callback_data
                    ))
            keyboard.append(row)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    cancel_callback = "cancel_sell" if action == "sell" else "cancel_delete"
    keyboard.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=cancel_callback)])

    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def create_category_keyboard(items: list, category: str, action: str = "sell") -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å —Ç–æ–≤–∞—Ä–∞–º–∏ –∏–∑ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    keyboard = []

    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    category_items = [item for item in items if item.get('category') == category]

    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    for i in range(0, len(category_items), 2):
        row = []
        for j in range(2):
            if i + j < len(category_items):
                item = category_items[i + j]
                item_name = item['name']
                item_id = item['id']

                button_text = item_name[:20] + "..." if len(item_name) > 20 else item_name

                if action == "sell":
                    callback_data = f"sell_{item_id}"
                else:
                    callback_data = f"sell_{item_id}"

                row.append(InlineKeyboardButton(
                    text=button_text,
                    callback_data=callback_data
                ))
        keyboard.append(row)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    keyboard.append([
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="back_to_categories"),
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_sell")
    ])

    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def create_quantity_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞"""
    keyboard = [
        [
            InlineKeyboardButton(text="1", callback_data="qty_1"),
            InlineKeyboardButton(text="2", callback_data="qty_2"),
            InlineKeyboardButton(text="3", callback_data="qty_3")
        ],
        [
            InlineKeyboardButton(text="5", callback_data="qty_5"),
            InlineKeyboardButton(text="10", callback_data="qty_10"),
            InlineKeyboardButton(text="–î—Ä—É–≥–æ–µ", callback_data="qty_custom")
        ],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_sell")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def format_demand_analytics(analytics_data: List[Dict], current_period: str, previous_period: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –ø–æ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ —Å–ø—Ä–æ—Å–∞"""
    if not analytics_data:
        return "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å–ø—Ä–æ—Å–∞:\n–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"
    
    text = f"üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å–ø—Ä–æ—Å–∞ ({current_period} vs {previous_period}):\n\n"
    
    total_current = 0
    total_previous = 0
    total_revenue_current = 0
    total_revenue_previous = 0
    
    for item in analytics_data:
        name = item['name']
        current_sold = item['current_sold']
        previous_sold = item['previous_sold']
        demand_change = item['demand_change']
        current_revenue = item['current_revenue']
        previous_revenue = item['previous_revenue']
        revenue_change = item['revenue_change']
        
        total_current += current_sold
        total_previous += previous_sold
        total_revenue_current += current_revenue
        total_revenue_previous += previous_revenue
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç—Ä–µ–Ω–¥
        if demand_change > 0:
            trend = f"üìà +{demand_change}"
        elif demand_change < 0:
            trend = f"üìâ {demand_change}"
        else:
            trend = "‚û°Ô∏è 0"
        
        text += f"üìö {name}:\n"
        text += f"   {current_period}: {current_sold} —à—Ç. ({current_revenue:.0f} z≈Ç)\n"
        text += f"   {previous_period}: {previous_sold} —à—Ç. ({previous_revenue:.0f} z≈Ç)\n"
        text += f"   –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {trend}\n\n"
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_change = total_current - total_previous
    total_revenue_change = total_revenue_current - total_revenue_previous
    
    if total_change > 0:
        total_trend = f"üìà +{total_change}"
    elif total_change < 0:
        total_trend = f"üìâ {total_change}"
    else:
        total_trend = "‚û°Ô∏è 0"
    
    text += f"üìä –ò–¢–û–ì–û:\n"
    text += f"   –ü—Ä–æ–¥–∞–∂–∏: {total_current} ‚Üí {total_previous} ({total_trend})\n"
    text += f"   –í—ã—Ä—É—á–∫–∞: {total_revenue_current:.0f} ‚Üí {total_revenue_previous:.0f} z≈Ç ({total_revenue_change:+.0f})\n"
    
    return text

def format_profit_report(profit_data: Dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –ø–æ –ø—Ä–∏–±—ã–ª–∏"""
    text = "üí∞ –û—Ç—á–µ—Ç –ø–æ –ø—Ä–∏–±—ã–ª–∏:\n\n"
    text += f"üìà –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: {profit_data['total_revenue']:.0f} z≈Ç\n"
    text += f"üí∏ –û–±—â–∏–µ –∑–∞—Ç—Ä–∞—Ç—ã: {profit_data['total_cost']:.0f} z≈Ç\n"
    text += f"üíé –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: {profit_data['total_profit']:.0f} z≈Ç\n"
    text += f"üìä –ú–∞—Ä–∂–∞ –ø—Ä–∏–±—ã–ª–∏: {profit_data['profit_margin']:.1f}%\n"
    
    return text

async def keep_alive():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –Ω–∞ Render.com"""
    while True:
        await asyncio.sleep(60)

def create_main_keyboard(role: str) -> ReplyKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏"""
    if role == "new_user":
        keyboard = [
            [KeyboardButton(text="üëë –°—Ç–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")],
            [KeyboardButton(text="üìö –ü—Ä–∞–π—Å-–ª–∏—Å—Ç"), KeyboardButton(text="üìä –û—Å—Ç–∞—Ç–∫–∏")]
        ]
    elif role == "admin":
        keyboard = [
            [KeyboardButton(text="üìö –ü—Ä–∞–π—Å-–ª–∏—Å—Ç"), KeyboardButton(text="üìä –û—Å—Ç–∞—Ç–∫–∏")],
            [KeyboardButton(text="üí∞ –ü—Ä–æ–¥–∞–∂–∞"), KeyboardButton(text="üì¶ –ü—Ä–∏—Ö–æ–¥")],
            [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä"), KeyboardButton(text="üìà –û—Ç—á—ë—Ç—ã")],
            [KeyboardButton(text="‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"), KeyboardButton(text="‚ùì –ü–æ–º–æ—â—å")]
        ]
    elif role == "leader":
        keyboard = [
            [KeyboardButton(text="üìö –ü—Ä–∞–π—Å-–ª–∏—Å—Ç"), KeyboardButton(text="üìä –û—Å—Ç–∞—Ç–∫–∏")],
            [KeyboardButton(text="üí∞ –ü—Ä–æ–¥–∞–∂–∞"), KeyboardButton(text="‚ùì –ü–æ–º–æ—â—å")]
        ]
    else:
        keyboard = []
    
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True, one_time_keyboard=False)

def create_admin_menu_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –º–µ–Ω—é"""
    keyboard = [
        [InlineKeyboardButton(text="üìä –û—Ç—á—ë—Ç—ã", callback_data="admin_reports")],
        [InlineKeyboardButton(text="üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data="admin_analytics")],
        [InlineKeyboardButton(text="üí∞ –ü—Ä–∏–±—ã–ª—å", callback_data="admin_profit")],
        [InlineKeyboardButton(text="‚ö†Ô∏è –ù–∏–∑–∫–∏–µ –æ—Å—Ç–∞—Ç–∫–∏", callback_data="admin_low_stock")],
        [InlineKeyboardButton(text="üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–º", callback_data="admin_management")],
        [InlineKeyboardButton(text="üîÑ –û–±–Ω—É–ª–∏—Ç—å –ø—Ä–æ–¥–∞–∂–∏", callback_data="admin_reset_sales")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def create_leader_menu_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é –¥–ª—è –≤–µ–¥—É—â–µ–≥–æ"""
    keyboard = [
        [InlineKeyboardButton(text="üí∞ –ü—Ä–∞–π—Å-–ª–∏—Å—Ç", callback_data="leader_price")],
        [InlineKeyboardButton(text="üì¶ –ü—Ä–æ–¥–∞—Ç—å —Ç–æ–≤–∞—Ä", callback_data="leader_sell")],
        [InlineKeyboardButton(text="üìä –û—Å—Ç–∞—Ç–∫–∏", callback_data="leader_stock")],
        [InlineKeyboardButton(text="‚ùì –ü–æ–º–æ—â—å", callback_data="leader_help")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def create_management_menu_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞–º–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    keyboard = [
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="manage_add_item")],
        [InlineKeyboardButton(text="üì¶ –ü—Ä–∏—Ö–æ–¥ —Ç–æ–≤–∞—Ä–∞", callback_data="manage_arrival")],
        [InlineKeyboardButton(text="üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä", callback_data="manage_edit_item")],
        [InlineKeyboardButton(text="üí∞ –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É", callback_data="manage_change_price")],
        [InlineKeyboardButton(text="üìã –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data="manage_change_name")],
        [InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="manage_delete_item")],
        [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –æ—Å—Ç–∞—Ç–∫–∏", callback_data="manage_update_stock")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def create_reports_menu_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é –æ—Ç—á—ë—Ç–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    keyboard = [
        [InlineKeyboardButton(text="üìä –û—Ç—á—ë—Ç –ø–æ –æ—Å—Ç–∞—Ç–∫–∞–º", callback_data="reports_stock")],
        [InlineKeyboardButton(text="üìã –ü–æ–ª–Ω–∞—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è", callback_data="reports_inventory")],
        [InlineKeyboardButton(text="‚ö†Ô∏è –ù–∏–∑–∫–∏–µ –æ—Å—Ç–∞—Ç–∫–∏", callback_data="reports_low_stock")],
        [InlineKeyboardButton(text="üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å–ø—Ä–æ—Å–∞", callback_data="reports_analytics")],
        [InlineKeyboardButton(text="üí∞ –û—Ç—á—ë—Ç –ø–æ –ø—Ä–∏–±—ã–ª–∏", callback_data="reports_profit")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def create_reports_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –æ—Ç—á—ë—Ç–æ–≤"""
    keyboard = [
        [InlineKeyboardButton(text="üìä –ü–æ–ª–Ω—ã–π –æ—Ç—á—ë—Ç", callback_data="report_full")],
        [InlineKeyboardButton(text="üìà –ò–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è", callback_data="report_inventory")],
        [InlineKeyboardButton(text="üìâ –ù–∏–∑–∫–∏–µ –æ—Å—Ç–∞—Ç–∫–∏", callback_data="report_low_stock")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def create_management_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    keyboard = [
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="add_item")],
        [InlineKeyboardButton(text="üì¶ –ü—Ä–∏—Ö–æ–¥ —Ç–æ–≤–∞—Ä–∞", callback_data="arrival")],
        [InlineKeyboardButton(text="üìù –û–±–Ω–æ–≤–∏—Ç—å –æ—Å—Ç–∞—Ç–æ–∫", callback_data="update_stock")],
        [InlineKeyboardButton(text="üë• –î–æ–±–∞–≤–∏—Ç—å –≤–µ–¥—É—â–µ–≥–æ", callback_data="add_leader")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def create_confirmation_keyboard(action: str) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    keyboard = [
        [InlineKeyboardButton(text="‚úÖ –î–∞", callback_data=f"confirm_{action}")],
        [InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="cancel_action")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)
